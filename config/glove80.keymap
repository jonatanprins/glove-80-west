#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define LAYER_colemakdh 0
#define LAYER_gallium 1
#define LAYER_alt_thumb 2
#define LAYER_alt_thumb_2 3
#define LAYER_alt_top 4
#define LAYER_num_right 5
#define LAYER_another_thumb 6
#define LAYER_another_thumb_2 7
#define LAYER_Nav 10
#define COMBO_REQUIRE_PRIOR_IDLE 160
#define COMBO_TIMEOUT 50
#define QUICK_TAP_MS 180
#define TAPPING_TERM_MS 290
#define PRIOR_IDLE_MS 170
#define LEFT_HAND_KEYS      \
            0  1  2  3  4         \
           10 11 12 13 14 15      \
           22 23 24 25 26 27      \
           34 35 36 37 38 39      \
           46 47 48 49 50 51      \
           64 65 66 67 68
#define                              RIGHT_HAND_KEYS \
                                             5  6  7  8  9 \
                                         16 17 18 19 20 21 \
                                         28 29 30 31 32 33 \
                                         40 41 42 43 44 45 \
                                         58 59 60 61 62 63 \
                                            75 76 77 78 79
#define THUMB_KEYS          \
                          69 52       57 74                \
                           70 53     56 73                 \

&sk {
    release-after-ms = <700>;
    quick-release;
};

&caps_word {
    /delete-property/ ignore-modifiers;

    continue-list = <UNDERSCORE MINUS BACKSPACE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

&sl { release-after-ms = <700>; };

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/ {
    macros {
        far: far {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RPAR &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp LBRC &kp RBRC>;
            label = "FAR";
        };

        tar: tar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RPAR &kp SPACE &kp MINUS &kp GT &kp SPACE &kp LBRC &kp RBRC>;
            label = "TAR";
        };
    };

    behaviors {
        combos {
            compatible = "zmk,combos";

            layernav {
                timeout-ms = <75>;
                key-positions = <>;
                bindings = <&number_word 3>;
                slow-release;
            };

            search {
                bindings = <&kp SLASH>;
                key-positions = <>;
                timeout-ms = <75>;
                require-prior-idle-ms = <125>;
            };

            command {
                bindings = <&kp LS(SEMI)>;
                key-positions = <>;
                timeout-ms = <75>;
                require-prior-idle-ms = <125>;
            };

            escape {
                bindings = <&kp ESCAPE>;
                key-positions = <>;
            };

            return {
                bindings = <&kp RETURN>;
                key-positions = <>;
            };

            far {
                bindings = <&far>;
                key-positions = <>;
            };

            tar {
                bindings = <&tar>;
                key-positions = <>;
            };
        };

        number_word: number_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
            ignore-modifiers;
        };

        ad_i: adaptive_i {
            compatible = "zmk,behavior-antecedent-morph";
            label = "adaptive_i";
            #binding-cells = <0>;
            defaults = <&kp I>;
            bindings = <&kp J>;
            antecedents = <I>;
            max-delay-ms = <250>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <700>;
            quick-release;
            ignore-modifiers;
        };

        bspc_num: bspc_num {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&none>, <&kp BSPC>;

            mods = <(MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        lsmartshift: lsmartshift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&skq LSHFT>, <&caps_word>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        leftshift: leftshift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&skq LEFT_SHIFT>, <&caps_word>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        rightshift: rightshift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT)>, <&caps_word>;

            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        rsmartshift: rsmartshift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&skq RSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        bslh_hash: bslh_hash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp LS(N3)>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        excl_perc: excl_perc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N1)>, <&kp LS(N5)>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        dollar_tilde: dollar_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N4)>, <&kp TILDE>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        at_caret: at_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N2)>, <&kp LS(N6)>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        pipe_grave: pipe_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(BSLH)>, <&kp GRAVE>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        one: one_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL)>, <&kp N1>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        two: two_lbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp N2>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        three: three_lbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(LBKT)>, <&kp N3>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        four: four_lparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>, <&kp N4>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        five: five_amps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N7)>, <&kp N5>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        six: six_equal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp N6>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        seven: seven_rparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N0)>, <&kp N7>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        eight: eight_rbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(RBKT)>, <&kp N8>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        nine: nine_rbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp N9>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        zero: zero {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>, <&kp N0>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RCTL|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_RCTL|MOD_LCTL)>;
        };

        lth: lth {
            compatible = "zmk,behavior-hold-tap";
            label = "LTH";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        lth_pr: lth_pr {
            compatible = "zmk,behavior-hold-tap";
            label = "LTH_PR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };

        left_mt: left_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_MT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <28 40 58 29 41 59 60 42 30 32 31 43 61 62 44 33 45 63>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
        };

        right_mt: right_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_MT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
            hold-trigger-key-positions = <27 39 51 50 38 25 26 37 49 48 36 24 23 35 47 34 22 46>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_colemakdh {
            bindings = <
&trans       &trans         &trans  &trans    &trans                                                                                                &trans    &trans        &trans      &trans            &trans
&at_caret    &one           &two    &three    &four      &five                                                                               &six   &seven    &eight        &nine       &zero             &excl_perc
&kp TAB      &kp Q          &kp W   &kp F     &kp P      &kp B                                                                               &kp J  &kp L     &kp U         &kp Y       &kp SINGLE_QUOTE  &bslh_hash
&kp ESCAPE   &kp A          &kp R   &kp S     &kp T      &kp G                                                                               &kp M  &kp N     &kp E         &kp I       &kp O             &kp MINUS
&sk LSHIFT   &kp Z          &kp X   &kp C     &kp D      &kp V  &skq LSHFT  &kp LCTRL  &kp LEFT_ALT    &kp LGUI      &kp RCTRL   &skq RSHFT  &kp K  &kp H     &kp COMMA     &kp DOT     &kp SEMI          &sk RSHIFT
&magic 11 0  &dollar_tilde  &trans  &kp LEFT  &kp RIGHT         &kp BSPC    &kp SLASH  &kp LALT        &kp LEFT_ALT  &kp RETURN  &kp SPACE          &kp DOWN  &kp UP_ARROW  &excl_perc  &pipe_grave       &none
            >;
        };

        cdh_experiment {
            bindings = <
&trans             &trans         &trans         &trans         &trans                                                                                           &trans    &trans          &trans           &trans            &trans
&at_caret          &one           &two           &three         &four      &five                                                                          &six   &seven    &eight          &nine            &zero             &excl_perc
&kp TAB            &kp Q          &kp W          &kp F          &kp P      &kp B                                                                          &kp J  &kp L     &kp U           &kp Y            &kp SINGLE_QUOTE  &bslh_hash
&kp BSPC           &kp A          &left_mt 10 R  &left_mt 10 S  &kp T      &kp G                                                                          &kp M  &kp N     &right_mt 10 E  &right_mt 10 I   &kp O             &kp MINUS
&kp LS(SEMICOLON)  &kp Z          &kp X          &kp C          &kp D      &kp V  &none      &kp LCTRL   &kp F24     &kp LGUI      &kp RCTRL  &none       &kp K  &kp H     &kp COMMA       &right_mt 9 DOT  &kp SEMI          &kp RETURN
&magic 11 0        &dollar_tilde  &trans         &kp LEFT       &kp RIGHT         &kp UNDER  &leftshift  &kp LALT    &kp LEFT_ALT  &kp SPACE  &kp ESCAPE         &kp DOWN  &kp UP_ARROW    &excl_perc       &pipe_grave       &none
            >;
        };

        layer_gallium {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans     &trans   &trans            &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans     &trans   &trans            &trans
&trans  &kp B   &kp L   &kp D   &kp C   &kp V                                                     &kp J   &kp Y   &kp O      &kp U    &kp SINGLE_QUOTE  &trans
&trans  &kp N   &kp R   &kp T   &kp S   &kp G                                                     &kp P   &kp H   &kp A      &kp E    &kp I             &trans
&trans  &kp X   &kp Q   &kp M   &kp W   &kp Z   &trans  &trans  &trans    &trans  &trans  &trans  &kp K   &kp F   &kp COMMA  &kp DOT  &kp SEMI          &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans     &trans   &trans            &trans
            >;
        };

        layer_alt_thumb_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                         &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &lth 9 BSPC  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        z-win {
            bindings = <
&trans  &trans  &trans         &trans  &trans                                                                    &trans  &trans  &trans          &trans            &trans
&trans  &trans  &trans         &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans          &trans            &trans
&trans  &trans  &trans         &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans          &trans            &trans
&trans  &trans  &left_mt 10 R  &trans  &trans  &trans                                                    &trans  &trans  &trans  &right_mt 10 I  &trans            &trans
&trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans          &right_mt 8 SEMI  &trans
&trans  &trans  &trans         &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans          &trans            &trans
            >;
        };

        z-symbol {
            bindings = <
&trans  &trans         &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans                  &trans
&trans  &trans         &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans                  &trans
&trans  &trans         &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans                  &trans
&trans  &trans         &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans                  &trans
&trans  &left_mt 10 Z  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_mt 10 SEMICOLON  &trans
&trans  &trans         &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans                  &trans
            >;
        };

        ctrl {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LCTRL  &trans  &trans    &trans  &trans  &kp RCTRL  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans     &trans  &trans    &trans  &trans  &trans             &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_num_right {
            bindings = <
&trans  &trans     &trans     &trans    &trans                                                                      &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans    &trans    &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans    &trans    &trans                                                    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans                                                    &trans  &kp N4  &kp N5  &kp N6  &kp N0  &trans
&trans  &trans     &trans     &trans    &trans    &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans     &trans     &trans    &trans            &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        win_layer {
            bindings = <
&trans  &trans            &trans              &trans            &trans                                                                              &trans  &trans           &trans  &trans  &trans
&trans  &trans            &trans              &trans            &trans            &trans                                                    &trans  &trans  &trans           &trans  &trans  &trans
&trans  &trans            &kp LA(LEFT)        &kp LA(RIGHT)     &trans            &trans                                                    &trans  &trans  &trans           &trans  &trans  &trans
&trans  &kp LA(NUMBER_1)  &kp LA(NUMBER_2)    &kp LA(NUMBER_3)  &kp LA(NUMBER_4)  &trans                                                    &trans  &trans  &kp RIGHT_SHIFT  &trans  &trans  &trans
&trans  &trans            &kp LA(LS(ESCAPE))  &kp LA(ESCAPE)    &trans            &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans
&trans  &trans            &trans              &trans            &trans                    &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans           &trans  &trans  &trans
            >;
        };

        layer_Nav {
            bindings = <
&trans  &trans        &trans     &trans          &trans                                                                        &trans    &trans        &trans     &trans   &trans
&trans  &trans        &trans     &trans          &trans    &trans                                                    &trans    &trans    &trans        &trans     &trans   &trans
&trans  &kp N1        &kp N2     &kp N3          &kp N4    &kp N5                                                    &kp N6    &kp N7    &kp N8        &kp N9     &kp N0   &trans
&trans  &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &sk LGUI  &trans                                                    &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp RET  &trans
&trans  &kp HOME      &trans     &kp LC(C)       &kp END   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &kp BSPC  &kp TAB       &trans     &trans   &trans
&trans  &trans        &trans     &trans          &trans            &trans  &trans  &trans    &trans  &trans  &trans            &trans    &trans        &trans     &trans   &trans
            >;
        };

        layer_sym_old {
            bindings = <
&trans  &trans     &trans         &trans            &trans                                                                                         &trans                &trans                 &trans      &trans   &trans
&trans  &trans     &trans         &trans            &trans             &trans                                                           &trans     &trans                &trans                 &trans      &trans   &trans
&trans  &kp GRAVE  &kp LESS_THAN  &kp GT            &kp MINUS          &kp PIPE                                                         &kp CARET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR  &trans   &trans
&trans  &kp EXCL   &kp STAR       &kp SLASH         &kp EQUAL          &kp AMPERSAND                                                    &kp HASH   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI    &kp DQT  &trans
&trans  &kp TILDE  &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PERCENT    &trans  &trans  &trans    &trans  &trans  &trans  &kp AT     &kp COLON             &kp BACKSLASH          &kp DOT     &kp SQT  &trans
&trans  &trans     &trans         &trans            &trans                            &trans  &trans  &trans    &trans  &trans  &trans             &trans                &trans                 &trans      &trans   &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none   &none   &none   &none   &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none   &none   &none   &none   &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &tog 2  &none   &none   &none   &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &tog 6  &none   &none   &none   &none
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &tog 3  &tog 5  &tog 4  &tog 1  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none   &none   &none   &none   &none
            >;
        };
    };
};
